#!/bin/bash
#Aviral Sinha
#CS 344: Operating Systems
#Program 1: Stats

#Temp File setup
avg=avg1$$
med=med1$$
results=results$$
temp_file=tempFile$$

trap "rm -f $avg $med $results $temp_file; exit 1" INT HUP TERM


#Calculate Rows
RowSelect()
{
    echo -e "Average\tMedian"   

    while read myLine
    do
        #Reset variables
        sum=0 
        count=0 
        average=0
    
       
        #Make calculating the median much simpler
        
        LineSort=$( echo $myLine | tr " " "\n" | sort -g )


        
        #Count value in a row and sum it

        for i in $LineSort
        do
            num=$i
            count=$[ $count + 1 ]
            sum=$[ $sum + $num ]
        done

       
        #Find median by counting through
        
        halfCount=`expr $[ $count / 2 ] + 1`
        x=1  

        for y in $LineSort
        do
            num2=$y
            if [ $x -le $halfCount ]
            then
                median=$num2
                x=$[ $x + 1 ]
            fi
        done

        
        #Calculate sum by adding up all inputs and then dividing by the count, then round up by .5 so only integers are produced
        
        if [ $count -eq 0 ]
        then
            average=""
        else
            average=$( echo "scale=2;  $sum / $count" | bc )
            average=$( echo "($average + .5) / 1" | bc )
        fi

        #Print Results 
        echo -e "$average\t$median"

    done < $user_file

}


#Calculate the column

ColumnSelect()
{
    #counting the variables
    col=1
    j=0
   

    #figure out number of columns
    num_col=$( head -n 1 $user_file | wc -w )
   
   
    #Create columns
    
    while [ $j -lt $num_col ]
    do
        sum=0
        count=0
        average=0

        #Cut and sort before calculation
        LineSort=$( cut -f $col $user_file | tr " " "\n" | sort -g )
        
        
        #loop to sum the digits
       
        for i in $LineSort
        do
            sum=`expr $sum + $i`
            count=`expr $count + 1`
        done

        
        #Find average of each column
        
        if [ $count -eq 0 ]
        then
            average=""
        else
            average=$( echo "scale=2;  $sum / $count" | bc )
            average=$( echo "($average + .5) / 1" | bc )
        fi

        
        # Setup median by counting
        
        halfCount=`expr $[ $count / 2 ] + 1`
        x=1  

        for y in $LineSort
        do
            num2=$y
            if [ $x -le $halfCount ]
            then
                median=$num2
                x=$[ $x + 1 ]
            fi
        done

        # averages and medians written to temp file
        echo $average >> $avg
        echo $median >> $med

        # Incrementing 
        col=`expr $col + 1`
        j=`expr $j + 1`
    done
    
    
     #Files written into a temp file then clean up all temp files once complete
    
    echo -e "Averages: " > $results
    if [ -e $avg ]
    then
        tr "\n" "\t" < $avg >> $results
    fi
    echo -e "\n" >> $results

    echo -e "Medians: " >> $results
    if [ -e $med ]
    then
        tr "\n" "\t" < $med >> $results
    fi
    echo -e "\n" >> $results
  
    #Remove Temp files 
    rm -f $avg $med

    #Output
    cat $results
    rm -f $results
}



#If a file isn't entered then function handles input at prompt and data is kept in a temp file
no_file()
{
    while read line
    do 
        echo -e "$line" >> $temp_file
    done < /dev/stdin
	
    user_file=$temp_file	
}

#Variables used for printing
usage_message=$( echo "Usage: stats {-rows|-cols} [file]" )
error_message=$( echo "stats: cannot read $2" )


# Parameter and calculations check

if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]
then
	echo $usage_message >&2
	exit 1	
fi

# If there is a second parameter then the file must be readable
if [[ "$2" != "" ]]
then
	if [ ! -r "$2" ]
	then
		echo $error_message >&2
		exit 1
	
	else
		user_file=$2
	fi
else
	no_file
fi


# Calculate either rows or columns

if [[ "$1" == -r* ]]
then
	RowSelect
elif [[ "$1" == -c* ]]
then
	ColumnSelect
else
	echo $usage_message >&2
	exit 1	
	
fi

#Remove all remaining temp files
rm -f $temp_file

exit 0

